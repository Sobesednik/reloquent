{"version":3,"sources":["../src/index.js"],"names":["reloquent","questions","timeout","res","askSingle","question","answer"],"mappings":";;;;;;;;AAAA;;;;AAEA;;;;;;;;;;;AAWA;;;;;;AAMA,eAAeA,SAAf,CAAyBC,SAAzB,EAAoCC,OAApC,EAA6C;AAC3C,QAAMC,MAAM,MAAM,2BAAaF,SAAb,EAAwBC,OAAxB,CAAlB;AACA,SAAOC,GAAP;AACD;AAED;;;;;;;;AAMA,eAAeC,SAAf,CAAyBC,QAAzB,EAAmCH,OAAnC,EAA4C;AAC1C,QAAM;AAAEG,cAAUC;AAAZ,MAAuB,MAAM,2BAAa;AAAED;AAAF,GAAb,EAA2BH,OAA3B,CAAnC;AACA,SAAOI,MAAP;AACD;;eAEcN,S","sourcesContent":["import askQuestions from './lib/ask-questions'\n\n/**\n * @typedef {Object} Question\n * @property {string} text A text to show to the user.\n * @property {string} [defaultValue] A default answer to the question.\n * @property {function} [getDefault] A function which will get the default value, possibly asynchronously.\n * @property {function} [validation] A validation function which should throw on error.\n * @property {(s: string) => string} [postProcess] A transformation function for the answer.\n *\n * @typedef {Object.<string, Question>} Questions\n */\n\n/**\n * Ask user questions via the CLI.\n * @param {Questions} questions A question or a questions configuration.\n * @param {number} [timeout] How long to wait before rejecting the promise. Waits forever by default.\n * @returns {Object.<string, string>} An object with answers.\n */\nasync function reloquent(questions, timeout) {\n  const res = await askQuestions(questions, timeout)\n  return res\n}\n\n/**\n * Ask user a question via the CLI.\n * @param {string|Question} question A question or a questions configuration.\n * @param {number} [timeout] How long to wait before rejecting the promise. Waits forever by default.\n * @returns {string} An answer to the question\n */\nasync function askSingle(question, timeout) {\n  const { question: answer } = await askQuestions({ question }, timeout)\n  return answer\n}\n\nexport default reloquent\nexport { askSingle }\n"],"file":"index.js"}